/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.ande.luxury.hotelapp.views;

import com.ande.luxury.hotelapp.entities.HotelRoom;
import com.ande.luxury.hotelapp.services.BookingService;
import com.ande.luxury.hotelapp.utilsdb.DialogUtils;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author bryanvislaochavez
 */
public class Reservas_CheckIn extends javax.swing.JInternalFrame {

    private static final Logger logger = LoggerFactory.getLogger(Reservas_CheckIn.class);
    private String userLogin;
    private List<HotelRoom> rooms;
    private Map<Integer, JButton> roomButtonMap = new HashMap<>();
    private Reservas_CheckIn_New reservaForm = null;
    private Reservas_CheckIn_Detail detailForm = null;

    /**
     * Creates new form Reservas_CheckIn
     */
    public Reservas_CheckIn() {

        initComponents();

        setTitle("CheckIn - Habitaciones");
        setSize(500, 300);

        // Inicializar panel y lista de habitaciones
        rooms = new ArrayList<>();

        initializeRooms();
        createRoomButtons();

        // Agregar panel a un JScrollPane por si hay muchas habitaciones
        JScrollPane scrollPane = new JScrollPane(roomPanelView);
        add(scrollPane, BorderLayout.CENTER);
    }

    public Reservas_CheckIn(String userLogin) {
        initComponents();
        setSize(500, 500);
        this.userLogin = userLogin;
        setTitle("Gestión de Habitaciones Check-In Habitaciones");

        // Inicializar panel y lista de habitaciones
        initializeRooms();
        createRoomButtons();

    }

    private void showLoadingIndicator() {
    roomPanelView.removeAll();
    roomPanelView.add(new JLabel("Cargando.", SwingConstants.CENTER));
    roomPanelView.revalidate();
    roomPanelView.repaint();
}
    
    public void refresh() {

        BookingService bookingService = new BookingService();
    List<HotelRoom> updatedRooms = bookingService.findAll();
    for (HotelRoom updatedRoom : updatedRooms) {
        for (HotelRoom currentRoom : rooms) {
            if (currentRoom.getRoomNumber().equals(updatedRoom.getRoomNumber())) {
                if (currentRoom.isReserved() != updatedRoom.isReserved()) {
                    JButton button = roomButtonMap.get(updatedRoom.getRoomNumber());
                    if (button != null) {
                        button.setBackground(updatedRoom.isReserved() ? Color.RED : Color.GREEN);
                    }
                }
                break;
            }
        }
    }
    rooms = updatedRooms; // Update the room list
    roomPanelView.revalidate();
    roomPanelView.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roomPanelView = new javax.swing.JPanel();

        setTitle("Ande Luxury :: CheckIn");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        roomPanelView.setBackground(new java.awt.Color(102, 102, 102));
        getContentPane().add(roomPanelView, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 16, 480, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //TEST
    private void initializeRooms() {
        showLoadingIndicator();
        SwingWorker<List<HotelRoom>, Void> worker = new SwingWorker<>() {
            @Override
            protected List<HotelRoom> doInBackground() {
                BookingService bookingService = new BookingService();
                return bookingService.findAll();
            }

            @Override
            protected void done() {
                try {
                    rooms = get();
                    createRoomButtons();
                } catch (Exception e) {
                    logger.error("Error loading rooms", e);
                    DialogUtils.showError(roomPanelView, "Error", "Failed to load rooms");
                }
            }
        };
        worker.execute();
    }

    private JButton createRoomButton(HotelRoom room) {
        JButton button = new JButton(room.getRoomNumber().toString());
        button.setPreferredSize(new Dimension(80, 80));
        button.setBackground(room.isReserved() ? Color.RED : Color.GREEN);
        button.setOpaque(true);
        button.setBorderPainted(false);

        button.addActionListener(e -> {
            if (!room.isReserved()) {
                if (reservaForm == null || !reservaForm.isVisible()) {
                    reservaForm = new Reservas_CheckIn_New(userLogin,
                            room.getRoomNumber() + " - " + room.getRoomType().getDescription().toUpperCase(),
                            room, this);
                    reservaForm.setVisible(true);
                } else {
                    //reservaForm.updateRoom(room); // Assume updateRoom method exists
                    reservaForm.toFront();
                }
            } else {
                if (DialogUtils.showConfirmation(roomPanelView, "Alerta", "Habitación ocupada ¿Desea ver el detalle?")) {
                    if (detailForm == null || !detailForm.isVisible()) {
                        detailForm = new Reservas_CheckIn_Detail(room);
                        detailForm.setVisible(true);
                    } else {
                        //detailForm.updateRoom(room); // Assume updateRoom method exists
                        detailForm.toFront();
                    }
                }
            }
        });

        return button;
    }

    private void createRoomButtons() {
        roomPanelView.removeAll();
        roomPanelView.setVisible(false);
        // Set a layout to optimize rendering
        roomPanelView.setLayout(new GridLayout(0, 5, 5, 5)); // 5 columns, adjustable gaps

        if (rooms != null) {
            for (HotelRoom room : rooms) {
                JButton button = roomButtonMap.getOrDefault(room.getRoomNumber(), createRoomButton(room));
                button.setBackground(room.isReserved() ? Color.RED : Color.GREEN);
                roomButtonMap.put(room.getRoomNumber(), button);
                if (button.getParent() == null) {
                    roomPanelView.add(button);
                }
            }
        }

        roomPanelView.setVisible(true);
        roomPanelView.revalidate();
        roomPanelView.repaint();
    }

    private void showReservationForm(String roomNumber) {
        // Crear un nuevo JFrame para el formulario de reserva
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel roomPanelView;
    // End of variables declaration//GEN-END:variables
}
