/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.ande.luxury.hotelapp.views;

import com.ande.luxury.hotelapp.entities.models.SearchBookings;
import com.ande.luxury.hotelapp.services.BookingService;
import com.ande.luxury.hotelapp.utilsdb.DialogUtils;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bryanvislaochavez
 */
public class Reservas_Checkout extends javax.swing.JInternalFrame {

    private String userLogin;

    /**
     * Creates new form Reservas_Checkout
     */
    public Reservas_Checkout(String userLogin) {
        initComponents();
        this.userLogin = userLogin;
        // Permitir selección de filas completas
        jTableBookings.setRowSelectionAllowed(true);
        jTableBookings.setColumnSelectionAllowed(false);
        jTableBookings.setCellSelectionEnabled(false);
        jTableBookings.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        String[] columns = {"UUID", "Habitación", "SubTotal", "SubTotal Servicios", "Total a Pagar"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        jTableBookings.setModel(model);
        // Refrescar la vista
        jTableBookings.revalidate();
        jTableBookings.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        txtNumDoc = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableBookings = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();

        setTitle("Ande Luxury :: Check-out");

        jLabel5.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel5.setText("Cliente/NumeroDocumento");

        txtNumDoc.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        txtNumDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumDocActionPerformed(evt);
            }
        });
        txtNumDoc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumDocKeyTyped(evt);
            }
        });

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/search.png"))); // NOI18N
        btnSearch.setToolTipText("Buscar");
        btnSearch.setDisabledIcon(null);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jTableBookings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableBookings.setAutoscrolls(false);
        jTableBookings.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableBookings);
        jTableBookings.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clear.png"))); // NOI18N
        btnLimpiar.setToolTipText("Nuevo Cliente");
        btnLimpiar.setDisabledIcon(null);
        btnLimpiar.setEnabled(false);
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(txtNumDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLimpiar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 822, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNumDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(btnSearch)
                    .addComponent(btnLimpiar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNumDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumDocActionPerformed
        try {
            // TODO add your handling code here:
            if (txtNumDoc.getText().isEmpty()) {
                DialogUtils.showError(null, "Validación", "Ingresa el numero de documento valido");
                return;
            }
            searchBookings();
        } catch (Exception ex) {
            Logger.getLogger(Reservas_Checkout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtNumDocActionPerformed

    private void txtNumDocKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumDocKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume(); // Ignora el carácter
        }
    }//GEN-LAST:event_txtNumDocKeyTyped

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            // TODO add your handling code here:
            if (txtNumDoc.getText().isEmpty()) {
                DialogUtils.showError(null, "Validación", "Ingresa el numero de documento valido");
                return;
            }
            searchBookings();
        } catch (Exception ex) {
            Logger.getLogger(Reservas_Checkout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        btnSearch.setEnabled(true);
        txtNumDoc.setEnabled(true);
        txtNumDoc.setText("");
        String[] columns = {"UUID", "Habitación", "SubTotal", "SubTotal Servicios", "Total a Pagar"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        jTableBookings.setModel(model);
        // Refrescar la vista
        jTableBookings.revalidate();
        jTableBookings.repaint();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    public void searchBookings() throws Exception {
        BookingService bookingService = new BookingService();
        List<SearchBookings> list = bookingService.listBookingsByDocumentNumber(txtNumDoc.getText());
        if (list.isEmpty()) {
            DialogUtils.showInfo(null, "Busqueda", "No se encontro ninguna reserva con este numero de documento");
            return;
        }
        btnSearch.setEnabled(false);
        txtNumDoc.setEnabled(false);
        btnLimpiar.setEnabled(true);

        String[] columns = {"UUID", "Habitación", "SubTotal", "SubTotal Servicios", "Total a Pagar"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);

        for (SearchBookings item : list) {
            Object[] row = new Object[]{
                item.getUuid(),
                item.getRoomNumber(),
                item.getSubtotalRoom(),
                item.getSubTotalServices(),
                item.getTotal()
            };
            model.addRow(row);
        }
        jTableBookings.setModel(model);

        // Mouse Listener para detectar doble clic en jTableBookings
        jTableBookings.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Detecta doble clic
                e.consume();

                int row = jTableBookings.rowAtPoint(e.getPoint()); // Obtener la fila clickeada
                int columnCount = jTableBookings.getColumnCount(); // Número total de columnas en la tabla

                // Validar que la fila es válida y hay al menos 2 columnas (para uuid y name)
                if (row >= 0 && columnCount >= 1) {
                    Object uuidObj = jTableBookings.getValueAt(row, 0); // Columna 0: UUID
                    Object nameObj = jTableBookings.getValueAt(row, 1); // Columna 1: Name

                    // Asegurar que no sean nulos
                    String uuid = uuidObj != null ? uuidObj.toString() : "N/A";
                    String name = nameObj != null ? nameObj.toString() : "N/A";

                    // Mostrar cuadro de confirmación
                    if (DialogUtils.showConfirmation(
                            null,
                            "Confirmar",
                            "Desea hacer checkout de la reserva  " + name + " (ID: " + uuid + ")?"
                    )) {
                        try {
                            cerrarBooking(uuid);
                        } catch (Exception ex) {
                            Logger.getLogger(Reservas_Checkout.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                } else {
                    // Si no hay suficientes columnas o la fila no es válida
                    System.err.println("Fila o columnas no válidas. Verifica el modelo de la tabla.");
                }
            }

        });

        // Refrescar la vista
        jTableBookings.revalidate();
        jTableBookings.repaint();

    }

    private void cerrarBooking(String uuid) throws Exception {

        BookingService bookingService = new BookingService();
        bookingService.checkOutBooking(uuid, userLogin);
        searchBookings();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableBookings;
    private javax.swing.JTextField txtNumDoc;
    // End of variables declaration//GEN-END:variables
}
