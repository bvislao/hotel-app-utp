name: Deploy with jDeploy
'on':
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: >-
            ${{ runner.os }}-node-${{ hashFiles('hotelapp/**/package-lock.json',
            'hotelapp/**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build Java project
        run: |
          echo "Building Java project with Maven..."
          mvn clean compile package -DskipTests
          echo "Listing target directory:"
          ls -la target/
        working-directory: hotelapp
      - name: Install dependencies
        run: |
          if [ -f "package-lock.json" ]; then
            echo "Found package-lock.json, using npm ci for faster, reliable installs..."
            npm ci
          elif [ -f "yarn.lock" ]; then
            echo "Found yarn.lock, using yarn install..."
            yarn install --frozen-lockfile
          else
            echo "No lockfile found, using npm install..."
            npm install
            echo "Consider committing the generated package-lock.json for faster CI builds"
          fi
        working-directory: hotelapp
      - name: Build project
        run: |
          if [ -f "package.json" ] && grep -q '"build"' package.json; then
            echo "Building project..."
            npm run build
          else
            echo "No build script found, skipping build step"
          fi
        working-directory: hotelapp
      - name: Install jDeploy globally
        run: npm install -g jdeploy
        env:
          NODE_AUTH_TOKEN: '${{ secrets.NPM_AUTH_TOKEN }}'
      - name: Configure jDeploy
        run: |
          # Crear un enlace simbólico al jdeploy.js en la raíz si no existe
          if [ ! -f "jdeploy.js" ] && [ -f "jdeploy-bundle/jdeploy.js" ]; then
            echo "Creating symlink to jdeploy.js..."
            ln -s jdeploy-bundle/jdeploy.js jdeploy.js
          fi
          
          # Verificar que el JAR existe y crear una configuración básica si es necesario
          if [ -f "target/hotelapp-1.0.0-final.jar" ]; then
            echo "JAR file found at target/hotelapp-1.0.0-final.jar"
            
            # Si no hay configuración de jDeploy, crear una básica
            if [ ! -f "jdeploy.js" ] && [ ! -f "jdeploy.json" ]; then
              echo "Creating basic jDeploy configuration..."
              cat > jdeploy.js << 'EOF'
module.exports = {
  "jar": "target/hotelapp-1.0.0-final.jar",
  "mainClass": "com.example.hotelapp.Main",
  "javaVersion": "21",
  "javafx": false
};
EOF
            fi
          else
            echo "JAR file not found!"
            echo "Available files in target:"
            ls -la target/
            exit 1
          fi
        working-directory: hotelapp
      - name: Verify jDeploy configuration
        run: |
          echo "Checking jDeploy configuration..."
          if [ -f "jdeploy.js" ]; then
            echo "Found jdeploy.js"
            echo "Content of jdeploy.js:"
            cat jdeploy.js
          elif [ -f "jdeploy.json" ]; then
            echo "Found jdeploy.json"
            echo "Content of jdeploy.json:"
            cat jdeploy.json
          else
            echo "No jDeploy configuration found!"
            echo "Available files:"
            ls -la
            exit 1
          fi
          
          echo "Checking for JAR file..."
          if [ -f "target/hotelapp-1.0.0-final.jar" ]; then
            echo "✓ Found JAR file: target/hotelapp-1.0.0-final.jar"
            ls -la target/hotelapp-1.0.0-final.jar
          else
            echo "✗ JAR file not found in target directory!"
            echo "Contents of target directory:"
            ls -la target/ || echo "Target directory does not exist"
            echo "Looking for JAR files anywhere:"
            find . -name "*.jar" -type f
            exit 1
          fi
        working-directory: hotelapp
      - name: Deploy with jDeploy
        run: |
          echo "Publishing with jDeploy..."
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          jdeploy publish
        env:
          NODE_AUTH_TOKEN: '${{ secrets.NPM_AUTH_TOKEN }}'
          NPM_TOKEN: '${{ secrets.NPM_AUTH_TOKEN }}'
        working-directory: hotelapp
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: 'jdeploy-artifacts-${{ github.run_number }}'
          path: |
            hotelapp/dist/
            hotelapp/*.jar
            hotelapp/jdeploy/
            hotelapp/package.json
            hotelapp/jdeploy.js
            hotelapp/jdeploy.json
          retention-days: 30
      - name: Create deployment summary
        if: success()
        run: "echo \"## \U0001F680 Deployment Successful\" >> $GITHUB_STEP_SUMMARY\necho \"- **Branch**: ${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Commit**: ${{ github.sha }}\" >> $GITHUB_STEP_SUMMARY\necho \"- **Timestamp**: $(date)\" >> $GITHUB_STEP_SUMMARY\necho \"- **jDeploy Version**: $(jdeploy --version)\" >> $GITHUB_STEP_SUMMARY\n"
      - name: Create Release Tag
        run: |
          VERSION=$(jq -r .version hotelapp/package.json)
          echo "Creating tag v$VERSION"
          git tag "v$VERSION"
          git push origin "v$VERSION"
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
